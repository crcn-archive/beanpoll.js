{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"fu",
				"function"
			],
			[
				"list",
				"listen"
			],
			[
				"_co",
				"_connections"
			],
			[
				"co",
				"con"
			],
			[
				"_c",
				"_connections"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src/core/pods/glue.core/glue.js",
			"settings":
			{
				"buffer_size": 4656,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "var RemoteGlue = require('./glue').RemoteGlue;\n	\nexports.pod = function(mediator, host)\n{\n\n	var readyPods = [];\n	\n	function init()\n	{\n		mediator.pull('glue.transport', function(transport)\n		{\n			new RemoteGlue(transport, mediator);\n		});\n	}\n	\n	function onPodReady(name)\n	{\n		readyPods.push(name);\n	}\n	\n	function onGlue(from)\n	{\n		readyPods.forEach(function(name)\n		{\n			from.push(name + '.ready');\n		});\n	}\n	\n	mediator.on({\n		'push init': init,\n		'push ready': onPodReady,\n		'push glue.connection': onGlue\n	})\n}",
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src/core/pods/glue.core/index.js",
			"settings":
			{
				"buffer_size": 511,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src/core/pods/glue.core/keys/app.js",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src/core/proxy/router/index.js",
			"settings":
			{
				"buffer_size": 7690,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src/core/proxy/router/parser.js",
			"settings":
			{
				"buffer_size": 6055,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/index.js",
			"settings":
			{
				"buffer_size": 2421,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "var Bridge  = require('./bridge'),\n	route   = require('./index'),\n	Request = route.Request,\n	Router  = route.Router,\n	Parser  = route.Parser,\n\n/**\n */\n\nvar ProxyRequest = Request.extend({\n\n	/**\n	 */\n\n	'override __construct': function(ops)\n	{\n		\n		this._super(ops);\n\n		//console.log(ops.next)\n		this._listener = ops.next;\n\n		this._stream = this.meta.stream;\n		this._batch = this.meta.batch;\n	},\n\n	/**\n	 * Overrided parent _callback so we can handle it accordingly.\n	 */\n	\n	'_callback': function(ops)\n	{\n\n		//write responses \n		var bridge = new Bridge(this),\n\n			//the callback function\n			listener = this._listener,\n\n			//streaming content for files / http, etc.\n			stream = this._stream,\n\n			//send back an array to the listener\n			batch = this._batch;\n\n\n		//because the framework needs to be easy to use, streams are turned off by default. This\n		//would be a huge pain in the pass if every time they're required, but they're SUPER important\n		//if we're trying to stream a large amount of data. What about HTTP? So if it's false, we need to \n		//add a stream handler.\n		if(!this._stream)\n		{\n\n			//the buffer for the streams\n			var buffer = [];\n\n\n			bridge.on({\n\n				//on write, throw the data into the buffer\n				write: function(data)\n				{\n					buffer.push(data);\n				},\n\n				//on end, callback the listener\n				end: function()\n				{\n\n					//again, it would be a pain in the ass if everytimg we have to do: var value = response[0]. So\n					//a \"batch\" must be specified if we're expecting an array, because 99% of the time for in-app route handling, \n					//only ONE value will be returned. \n					if(batch)\n					{\n						listener(buffer);\n					}\n					else\n					{\n\n						//so again, by default callback the listener as many times as there are batch values\n						for(var i = 0, n = buffer.length; i < n; i++)\n						{\n							listener(buffer[i]);\n						}\n					}\n				}\n			});\n		}\n\n		//is the listener expecting a stream? Okay, then pass on the writer to the listener. Only use this for files, http requests, and the\n		//likes plz, omg you're code would look like shit otherwise >.>\n		else\n		{\n			listener(bridge);\n		}\n\n\n		ops.callback(bridge);\n	}\n});\n\n/**\n */\n\nvar ProxyRouter = Router.extend({\n	\n	/**\n	 */\n\n	'_getRequest': function(ops)\n	{\n		return new ProxyRequest(ops);\n	}\n});\n\n/**\n * Allows for multiple pulls to be registered. \n */\n\nvar ProxyMultiRouter = ProxyRouter.extend({\n	\n	/**\n	 */\n\n	'__construct': function(ops)\n	{\n		if(!ops) ops = {};\n\n		ops.multi = true;\n\n		this._super(ops);\n	}\n});\n\n\n\nexports.Router = ProxyRouter;\nexports.MultiRouter = ProxyMultiRouter;\n",
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/router/pull.js",
			"settings":
			{
				"buffer_size": 2569,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/router/index.js",
			"settings":
			{
				"buffer_size": 8056,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "var Structr = require('structr'),\nParser = require('./parser');\n\n\n/*\n\nNotes on developing this:\n\n1. only one pass-thru can be fired off at a time, since they depend on the \"next\" to go onto the *next* passthru, or batch\n2. At the end of the pass thru's, the listeners are fired off all at the same time. However, they might ALSO have passthru's, so *those* passthru's are \nfired off individually.\n\nWhat if a channel has the exact same passthru? \n\nIt's called as many times as they're defined. \n*/\n\n\n/**\n * the request for the given channels. Yeah yeah... There are methods which look like wasted overhead, but it's designed to be\n * extendable. \n */\n\n\nvar Request = Structr({\n	\n	/**\n	 */\n\n	'__construct': function(ops)\n	{\n\n		//the path used \n		this.path = ops.path;\n\n		//the data passed to each listener\n		this.data = ops.data;\n\n		//the router which holds all listeners\n		this.router = ops.router;\n\n		//need to go through these before firing the callback. optional\n		this._thru = ops.thru;\n\n		//listeners of the given channel\n		this._listeners = ops.listeners;\n\n		//the end callback which is fired after everything's done\n		this._next = ops.next;\n	},\n\n	/**\n	 * next callback\n	 */\n\n	'next': function(data)\n	{\n\n		//these get hit first in order.\n		if(this._thru.length)\n		{\n			return this._init(this._thru.shift());\n		}\n\n\n		//then the listeners get it at the same time\n		if(this._listeners)\n		{\n			var listeners = this._listeners;\n			this._listeners = null;\n			for(var i = listeners.length; i--;)\n			{\n				this._init(listeners[i]);	\n			}\n\n			return true;\n		}\n\n		//next should ONLY BE CALLED ONCE! It's actually a callback\n		//which is past *by* the request while traversing through the listeners.\n		//If next is called more than once, we could be hitting the same callback twice. Not good.\n		if(this._next)\n		{\n			this._next();\n			this._next = null;\n			return true;\n		}\n\n\n		//nothing else to parse? return false for any potential pass-thrus. It's useful if they\n		//know if the chain was nexted or not.\n		return false;\n	},\n\n\n	/**\n	 * prepares the callback before firing\n	 */\n\n	'_init': function(ops)\n	{\n\n		//params for the passthru? Fucking awesome. Apply them to the data-layer\n		if(ops.params)\n		for(var param in ops.params)\n		{\n\n			//also, remember that ops.params are mapped to the index of the URI\n			this.data[param] = this.path[ ops.params[param] ];\n		}\n		\n		//need to copy the items we need to pass thru since they're unshifted until we can continue \n		ops.thru = ops.thru.concat();\n\n		//now the callback's ready, let's start calling shit. \n		this._passThru(ops);\n	},\n\n	/**\n	 * need to pass thru the callback before firing it off\n	 */\n\n	'_passThru': function(ops)\n	{\n		//this happens if a pass thru is defined in the callback. like so:\n		//router.on('authenticate/user -> get/user/mail'). Just recursively call the pass-thru methods\n		//until there's no shit left to call.\n		if(ops.thru.length)\n		{\n			var self = this;\n\n			return this.router.dispatch(ops.thru.shift(), this.data, function()\n			{	\n\n				//back to the passthru with the same ops. DATA might have changed ;)\n				self._passThru(ops);\n			});\n		}\n\n		//no more callbacks to pass thru, so callback the final listener. but Blah, we're calling another\n		//method in Request >.>. It's because this shit needs to be overridden incase the callback function changes, duh. \n		//Don't you want support for streaming content? HUH!?!?!?!?\n		this._callback(ops);\n	},\n\n	/**\n	 * final callback\n	 */\n\n	'_callback': function(ops)\n	{\n\n		//blah blah blah, stfu. Design > speed (in some cases). Damn I LOVE cappuccino's.\n		//Can't work without my fucking cappuccino, or machiato. Cappuccino > machiato IMO, but that all depends if whether you get the milk right.\n		//Shit's not right if your milk's not velvety, and sweet. No sugar bitch. Lactose at a certain temp tastes sweet. Don't oversteam that shit, \n		//otherwise you're milk will cook. 140 F, and take the fucking steam wand out, and you're good to go. Sprinkle coco on that shit. \n		ops.callback(this);\n	}\n	\n});\n\n/**\n * routes channel requests\n */\n\nvar Router = Structr({\n	\n	/**\n	 * Constructor. What else do you think it is?\n	 */\n\n	'__construct': function(ops)\n	{\n\n		//the options for the router\n		this._ops = ops || {};\n\n		//these are the channels parsed into a traversable route\n		this._routes = {};\n\n\n		//!! this is an important flag. Note it, remember it. Allowing multiple \n		//callbacks changes the router's behaviour more to a pub/sub - oberserver behavior. Use it for \n		//PUSHING content to LISTENERS. In brazln, it's used for push, and pull-multi\n		this._allowMultiple = !!this._ops.multi;\n	},\n\n	/**\n	 * listens to the given expression for any change\n	 */\n\n	'on': function(expr, callback)\n	{\n		var paths = expr.paths,\n\n			//start at the root, and work our way down.\n			currentRoute = this._routes,\n\n			//params, with a mapped index of where the param is in the URI / channel / path - call it whatever you want. \n			params = {};\n\n		for(var i = 0, n = paths.length; i < n; i++)\n		{\n		 	var currentPath = paths[i],\n		 	name = currentPath.name,\n		 	isParam = currentPath.param;\n\n		 	if(isParam)\n		 	{\n\n		 		//set the index for the parameter so we can map back to it.\n		 		params[name] = i; \n\n		 		//name needs to be renamed to _param, which tells router to go through it *if* the current\n		 		//channel path does not exist. \n		 		name = '_param';\n		 	}\n\n			if(!currentRoute[name])\n			{\n				currentRoute[name] = { _callbacks: [], _thru: [] };\n			}\n\n			currentRoute = currentRoute[name];\n		}\n\n\n		//unless specified (pull multi, or push) routes can only be set once.\n		if((currentRoute._callbacks.length || currentRoute._thru.length) && !this._allowMultiple)\n		{\n			throw new Error('The path \"'+this._pathToString(paths)+'\" already exists');\n		}\n\n		//the targe callback\n		var target = { params: params, \n			callback: callback, \n			thru: this._passThrusToArray(expr) },\n\n		//the callback can either *be* a callback, or a passthru. One or the other, but not both.\n		stack = (expr.passThru ? currentRoute._thru : currentRoute._callbacks);\n\n		stack.push(target);\n		\n		return {\n			dispose: function()\n			{\n				var index = stack.indexOf(target);\n\n				if(index > -1) stack.splice(index, 1);\n			}\n		}\n	},\n\n	/**\n	 * dispatches an event with the given channel, and data. \n	 * @channel the channel to dispatch a change to\n	 * @data the data to pass to the channel listener(s)\n	 * @next called after a passthru. \n	 */\n\n	'dispatch': function(channel, data, next)\n	{	\n\n		//remove trailing backslashes or one too many.\n		var paths = channel.replace(/\\/+/g,'\\/').\n		replace(/(^\\/)?(\\/$)?/g,'').\n		split('/');\n\n\n		var thru = [];\n\n		var currentRoute = this._routes;\n		\n		for(var i = 0, n = paths.length; i < n; i++)\n		{\n			var path = paths[i];\n\n			if(currentRoute._thru)\n			{\n				thru = thru.concat(currentRoute._thru);\n			}\n\n			currentRoute = currentRoute[path] || currentRoute._param;\n\n			if(!currentRoute)\n			{\n				break;\n			}\n		} \n\n		this._getRequest({\n			path: paths,\n			thru: thru,\n			data: data,\n			router: this,\n			next: next,\n			listeners: i == n ? currentRoute._callbacks : []\n		}).next();\n	},\n\n	/**\n	 * Overridable \n	 */\n\n	'_getRequest': function(ops)\n	{\n		return new Request(ops);\n	},\n\n	/**\n	 */\n\n	'_pathToString': function(path)\n	{\n		var paths = [];\n\n		for(var i = 0, n = path.length; i < n; i++)\n		{\n			var pt = path[i];\n\n			paths.push(pt.param ? '$param' : pt.name);	\n		}\n\n		return paths.join('/');\n	},\n\n	/**\n	 */\n\n	'_passThrusToArray': function(expr)\n	{\n		var cpt = expr.thru,\n		thru = [];\n\n		while(cpt)\n		{\n			thru.push(this._pathToString(cpt.paths));\n			cpt = cpt.thru;\n		}\n\n		return thru;\n	}\n});\n\n\nexports.Parser  = Parser;\nexports.Router  = Router;\nexports.Request = Request;\n\n\n\n\n",
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/router/pullMulti.js",
			"settings":
			{
				"buffer_size": 7690,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/router/bridge.js",
			"settings":
			{
				"buffer_size": 1412,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/router/proxy.js",
			"settings":
			{
				"buffer_size": 3509,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/router/parser.js",
			"settings":
			{
				"buffer_size": 6114,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/README.md",
			"settings":
			{
				"buffer_size": 4095,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/pods/glue.core/glue.js",
			"settings":
			{
				"buffer_size": 6071,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/examples/app glue/pods/hello.glue.connect/index.js",
			"settings":
			{
				"buffer_size": 619,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/examples/app glue/index.js",
			"settings":
			{
				"buffer_size": 443,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/index.js",
			"settings":
			{
				"buffer_size": 757,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/pods/glue.core/index.js",
			"settings":
			{
				"buffer_size": 944,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/node/pods/glue.http/http.js",
			"settings":
			{
				"buffer_size": 5927,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/node/pods/glue.http/index.js",
			"settings":
			{
				"buffer_size": 224,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0,
		"selected_items":
		[
		],
		"width": 0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/examples/app glue/pods/hello.glue.connect/index.js",
		"/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/node/pods/glue.http/index.js",
		"/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/router/push.js",
		"/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/router/bridge.js",
		"/Users/craigcondon/Dropbox/work/Spice/libs/psk/node/server/router.js",
		"/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src/core/proxy/router/parser.js"
	],
	"find_in_files":
	{
		"include_history":
		[
		],
		"location_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ProtectedProxy",
			"from",
			"splice",
			"_send",
			"response",
			"listenOnPush",
			"WORD",
			"expr",
			"_modified",
			"janitor",
			"sys",
			"GO",
			"paths",
			"thru",
			"console.lo",
			"callbacks",
			"routes",
			"currentTypeIs",
			"hasN",
			"metadata",
			"nextWord",
			"nextChar",
			"pullKe"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Proxy"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer": false,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	{
		"mount_points":
		[
			"/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln"
		]
	},
	"groups":
	[
		{
			"selected": 13,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src/core/pods/glue.core/glue.js",
					"settings":
					{
						"buffer_size": 4656,
						"regions":
						{
						},
						"selection":
						[
							[
								661,
								661
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 78,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src/core/pods/glue.core/index.js",
					"settings":
					{
						"buffer_size": 511,
						"regions":
						{
						},
						"selection":
						[
							[
								403,
								403
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src/core/pods/glue.core/keys/app.js",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src/core/proxy/router/index.js",
					"settings":
					{
						"buffer_size": 7690,
						"regions":
						{
						},
						"selection":
						[
							[
								7685,
								7685
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0,
						"translation.y": 1700,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src/core/proxy/router/parser.js",
					"settings":
					{
						"buffer_size": 6055,
						"regions":
						{
						},
						"selection":
						[
							[
								2183,
								2183
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/index.js",
					"settings":
					{
						"buffer_size": 2421,
						"regions":
						{
						},
						"selection":
						[
							[
								2421,
								2421
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/router/pull.js",
					"settings":
					{
						"buffer_size": 2569,
						"regions":
						{
						},
						"selection":
						[
							[
								2491,
								2491
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 1137,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/router/index.js",
					"settings":
					{
						"buffer_size": 8056,
						"regions":
						{
						},
						"selection":
						[
							[
								932,
								932
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/router/pullMulti.js",
					"settings":
					{
						"buffer_size": 7690,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/router/bridge.js",
					"settings":
					{
						"buffer_size": 1412,
						"regions":
						{
						},
						"selection":
						[
							[
								952,
								952
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 540,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/router/proxy.js",
					"settings":
					{
						"buffer_size": 3509,
						"regions":
						{
						},
						"selection":
						[
							[
								3357,
								3357
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 54,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/proxy/router/parser.js",
					"settings":
					{
						"buffer_size": 6114,
						"regions":
						{
						},
						"selection":
						[
							[
								3640,
								3640
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 4483,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/README.md",
					"settings":
					{
						"buffer_size": 4095,
						"regions":
						{
						},
						"selection":
						[
							[
								375,
								375
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 2,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/pods/glue.core/glue.js",
					"settings":
					{
						"buffer_size": 6071,
						"regions":
						{
						},
						"selection":
						[
							[
								1720,
								1720
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 559,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/examples/app glue/pods/hello.glue.connect/index.js",
					"settings":
					{
						"buffer_size": 619,
						"regions":
						{
						},
						"selection":
						[
							[
								489,
								489
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/examples/app glue/index.js",
					"settings":
					{
						"buffer_size": 443,
						"regions":
						{
						},
						"selection":
						[
							[
								264,
								264
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/index.js",
					"settings":
					{
						"buffer_size": 757,
						"regions":
						{
						},
						"selection":
						[
							[
								103,
								103
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/core/pods/glue.core/index.js",
					"settings":
					{
						"buffer_size": 944,
						"regions":
						{
						},
						"selection":
						[
							[
								668,
								668
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/node/pods/glue.http/http.js",
					"settings":
					{
						"buffer_size": 5927,
						"regions":
						{
						},
						"selection":
						[
							[
								1541,
								1541
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 751,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "/Users/craigcondon/Dropbox/work/Spice/libs/node/brazln/src-0.2/node/pods/glue.http/index.js",
					"settings":
					{
						"buffer_size": 224,
						"regions":
						{
						},
						"selection":
						[
							[
								133,
								133
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				}
			]
		}
	],
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0,
			1
		],
		"rows":
		[
			0,
			1
		]
	},
	"menu_visible": true,
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0,
		"selected_items":
		[
		],
		"width": 0
	},
	"select_project":
	{
		"height": 0,
		"selected_items":
		[
		],
		"width": 0
	},
	"show_minimap": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 210,
	"status_bar_visible": true
}
